1) Paste the console output you saved at the end of step 3.C (the successful git push output):
Username for 'https://github.com': Martol1
Password for 'https://Martol1@github.com':
remote: Invalid username or token. Password authentication is not supported for Git operations.
fatal: Authentication failed for 'https://github.com/Martol1/assignment2.git/'
I had to push manually throught the git-gui due to the terminal not allowing me to submit no matter what i tried logging in with


2) How many commits have been done to the repository (not only by you, but by anyone) so far?
Command used: git rev-list --count --all
Result: 8

3) When was the README.md file modified last?
Command used: git log -1 --date=iso-strict --format="%ad" -- README.md
Result: 2019-09-25T18:33:08-04:00


4) Mention two reasons why branches are used in a Git repository:
They allow developers to work on new features or bug fixes without messing up the main code
Parallel developement

5) What is the difference between git log and git status?
git log shows the commit history of the repository
git status shows the current state of the working directory and staging area


6) What command would you use to see the commits where “Vehicle.h” was one of the committed files?
git log --follow --oneline --name-status -- Vehicle.h


7) What command would you use to see the commits whose commit message contains the word “file”?
git log --oneline --grep="file" -i


8) In the context of object-oriented programming:
Inheritance: A class can inherit attributes and behavior from another class
Polymorphism: The same method call can behave differently depending on the objects type
Encapsulation: Data and methods are grouped together and direct access to the data is restricted


9) What is the main difference between the “Dictator and Lieutenants” workflow and the “Integration Manager” workflow?
Integration Manager workflow: Each developer pushes to their own public repository and pulls from the central repository one person merges them
Dictator and Lieutenants workflow: Only the dictator can push to the central repository developers submit their changes to lieutenants, who check before the dictator adds their work into the central repo


10) How would a team of 100 developers benefit from following the “Dictator and Lieutenants” workflow instead of the “Centralized” workflow?
In the Centralized workflow everyone pushes to one central repo which can cause heavy conflicts and slow progress
In the Dictator and Lieutenants workflow merging and conflict resolution responsibilities are distributed across lieutenant reducing bottlenecks